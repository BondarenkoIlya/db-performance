buildscript {
    dependencies{
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.9.4"
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'groovy'
}

apply plugin: 'docker-compose'

group = 'com.home.ilya'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories{
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.springfox:springfox-swagger2:2.9.2'
    implementation 'io.springfox:springfox-swagger-ui:2.9.2'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
}

test {
    useJUnitPlatform()

    exclude '**/integration/**'

    failFast = true

    dependsOn 'cleanTest'

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'FULL'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()

    include '**/*IntegrationTest.class'

    dependsOn 'cleanTest'

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'FULL'
    }
}

dockerCompose.isRequiredBy(integrationTest)

dockerCompose {
    useComposeFiles = ["${project.rootDir}/docker-compose.yml"]
    startedServices = ['rabbitmq', 'database-mssql', 'database-postgresql']
    forceRecreate = true
    buildBeforeUp = true
    buildAdditionalArgs = ['--force-rm', '--no-cache']

    projectName = 'odis'
    dockerComposeWorkingDirectory = './'
    includeDependencies = true
    captureContainersOutput = false
}
